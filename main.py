import cv2
import numpy as np
from tkinter import Tk, filedialog, Button, Label, Canvas, Scale, HORIZONTAL, Frame, Toplevel
from tkinter import ttk
from PIL import Image, ImageTk
import matplotlib.pyplot as plt

# C√°c h√†m x·ª≠ l√Ω ·∫£nh (t√≠nh nƒÉng c≈©)
def adjust_brightness(image, brightness=50):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)
    v = cv2.add(v, brightness)
    v = np.clip(v, 0, 255)
    final_hsv = cv2.merge((h, s, v))
    bright_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
    return bright_image

def adjust_contrast(image, contrast=1.0):
    alpha = contrast
    adjusted = cv2.convertScaleAbs(image, alpha=alpha, beta=0)
    return adjusted

def apply_color_filter(image, filter_type='sepia'):
    if filter_type == 'sepia':
        kernel = np.array([[0.393, 0.769, 0.189],
                           [0.349, 0.686, 0.168],
                           [0.272, 0.534, 0.131]])
        image = cv2.transform(image, kernel)
        image = np.clip(image, 0, 255)
    elif filter_type == 'bw':
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
    return image

def crop_and_resize(image, x, y, w, h, new_width, new_height):
    cropped_image = image[y:y+h, x:x+w]
    resized_image = cv2.resize(cropped_image, (new_width, new_height))
    return resized_image
# B·ªô l·ªçc Luminous: TƒÉng c∆∞·ªùng ƒë·ªô s√°ng v√† l√†m s√°ng da
def apply_luminous_filter(image):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)
    v = cv2.add(v, 50)  # TƒÉng ƒë·ªô s√°ng
    v = np.clip(v, 0, 255)
    final_hsv = cv2.merge((h, s, v))
    luminous_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
    return luminous_image

# B·ªô l·ªçc Glowing: T·∫°o hi·ªáu ·ª©ng ph√°t s√°ng
def apply_glowing_filter(image):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)
    v = cv2.add(v, 100)  # TƒÉng ƒë·ªô s√°ng l√™n m·∫°nh m·∫Ω
    s = cv2.multiply(s, 1.2)  # TƒÉng c∆∞·ªùng ƒë·ªô b√£o h√≤a m√†u
    v = np.clip(v, 0, 255)
    s = np.clip(s, 0, 255)
    final_hsv = cv2.merge((h, s, v))
    glowing_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
    return glowing_image

# B·ªô l·ªçc Vintage: T·∫°o hi·ªáu ·ª©ng c·ªï ƒëi·ªÉn v·ªõi t√¥ng m√†u ·∫•m
def apply_vintage_filter(image):
    kernel = np.array([[0.393, 0.769, 0.189],
                       [0.349, 0.686, 0.168],
                       [0.272, 0.534, 0.131]])
    vintage_image = cv2.transform(image, kernel)
    vintage_image = np.clip(vintage_image, 0, 255)
    return vintage_image

# B·ªô l·ªçc Neon: T·∫°o hi·ªáu ·ª©ng s√°ng neon
def apply_neon_filter(image):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)
    s = cv2.multiply(s, 1.5)  # TƒÉng ƒë·ªô b√£o h√≤a m·∫°nh m·∫Ω
    v = cv2.add(v, 50)  # TƒÉng ƒë·ªô s√°ng m·∫°nh m·∫Ω
    s = np.clip(s, 0, 255)
    v = np.clip(v, 0, 255)
    final_hsv = cv2.merge((h, s, v))
    neon_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
    return neon_image
# H√†m xo√° ph√¥ng
def remove_background(image):
    # Chuy·ªÉn ·∫£nh t·ª´ BGR sang HSV ƒë·ªÉ d·ªÖ d√†ng x·ª≠ l√Ω
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # ƒê·ªãnh nghƒ©a kho·∫£ng m√†u n·ªÅn (v√≠ d·ª• m√†u xanh l√° c√¢y)
    lower_bound = np.array([35, 50, 50])  # M√†u xanh l√° c√¢y (HSV)
    upper_bound = np.array([85, 255, 255])

    # T·∫°o m·∫∑t n·∫° ƒë·ªÉ gi·ªØ l·∫°i c√°c ph·∫ßn kh√¥ng ph·∫£i l√† n·ªÅn
    mask = cv2.inRange(hsv, lower_bound, upper_bound)

    # ƒê·∫£o ng∆∞·ª£c m·∫∑t n·∫° ƒë·ªÉ l·∫•y ph·∫ßn kh√¥ng ph·∫£i l√† n·ªÅn
    mask_inv = cv2.bitwise_not(mask)

    # L·ªçc ph·∫ßn kh√¥ng ph·∫£i l√† n·ªÅn t·ª´ ·∫£nh g·ªëc
    result = cv2.bitwise_and(image, image, mask=mask_inv)
    
    return result

# H√†m t√≠nh to√°n v√† v·∫Ω bi·ªÉu ƒë·ªì m√†u c·ª•c b·ªô
def compute_local_color_histogram(image, x, y, width, height):
    region = image[y:y+height, x:x+width]
    hsv = cv2.cvtColor(region, cv2.COLOR_BGR2HSV)
    
    h_hist = cv2.calcHist([hsv], [0], None, [256], [0, 256])  # Hue
    s_hist = cv2.calcHist([hsv], [1], None, [256], [0, 256])  # Saturation
    v_hist = cv2.calcHist([hsv], [2], None, [256], [0, 256])  # Value
    
    return h_hist, s_hist, v_hist

def show_local_color_histogram(image, x, y, width, height):
    h_hist, s_hist, v_hist = compute_local_color_histogram(image, x, y, width, height)
    
    # V·∫Ω bi·ªÉu ƒë·ªì
    plt.figure(figsize=(10, 5))
    
    plt.subplot(131)
    plt.plot(h_hist, color='r')
    plt.title('Hue Histogram')
    
    plt.subplot(132)
    plt.plot(s_hist, color='g')
    plt.title('Saturation Histogram')
    
    plt.subplot(133)
    plt.plot(v_hist, color='b')
    plt.title('Value Histogram')
    
    plt.tight_layout()
    plt.show()

class PhotoEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("B·ªô l·ªçc ·∫£nh AI")

        # Title Label
        self.title_label = Label(self.root, text="B·ªô l·ªçc phong c√°ch c√° nh√¢n", font=("Helvetica", 20, "bold"), fg="blue")
        self.title_label.pack(pady=10)

        # Frame cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn (b√™n tr√°i)
        self.left_frame = Frame(self.root, width=300, height=600, padx=10, pady=5)
        self.left_frame.pack(side="left", fill="y")

        # Frame cho ·∫£nh (b√™n ph·∫£i)
        self.right_frame = Frame(self.root, width=800, height=600, padx=10, pady=5)
        self.right_frame.pack(side="right", fill="both", expand=True)

        self.canvas = Canvas(self.right_frame, width=800, height=600, bg="lightgray")
        self.canvas.pack(pady=20)

        self.label = Label(self.left_frame, text="Ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu", font=("Arial", 16))
        self.label.pack(pady=5)

        # N√∫t m·ªü ·∫£nh v·ªõi bi·ªÉu t∆∞·ª£ng emoji
        self.btn_open = Button(self.left_frame, text="üìÇ M·ªü ·∫£nh", command=self.open_image, relief="raised", font=("Helvetica", 12, "bold"), bg="#4CAF50", fg="black")
        self.btn_open.pack(fill="x", padx=10, pady=5)

        # C√°c n√∫t ƒëi·ªÅu ch·ªânh ƒë·ªô s√°ng
        self.btn_brightness = Button(self.left_frame, text="üîÜ Ch·ªânh ƒë·ªô s√°ng", command=self.apply_brightness, relief="raised", font=("Helvetica", 12, "bold"), bg="#FFC107", fg="black")
        self.btn_brightness.pack(fill="x", padx=10, pady=5)

        self.brightness_slider = Scale(self.left_frame, from_=0, to=100, orient=HORIZONTAL, label="ƒê·ªô s√°ng", relief="sunken", sliderlength=20)
        self.brightness_slider.set(50)
        self.brightness_slider.pack(fill="x", padx=10, pady=5)

        # C√°c n√∫t ƒëi·ªÅu ch·ªânh ƒë·ªô t∆∞∆°ng ph·∫£n
        self.btn_contrast = Button(self.left_frame, text="üéõÔ∏è Ch·ªânh ƒë·ªô t∆∞∆°ng ph·∫£n", command=self.apply_contrast, relief="raised", font=("Helvetica", 12, "bold"), bg="#FFC107", fg="black")
        self.btn_contrast.pack(fill="x", padx=10, pady=5)

        self.contrast_slider = Scale(self.left_frame, from_=0.1, to=2.0, orient=HORIZONTAL, resolution=0.1, label="ƒê·ªô t∆∞∆°ng ph·∫£n", relief="sunken", sliderlength=20)
        self.contrast_slider.set(1.0)
        self.contrast_slider.pack(fill="x", padx=10, pady=5)

        # C√°c n√∫t b·ªô l·ªçc m√†u
        self.btn_sepia = Button(self.left_frame, text="üé® Sepia", command=lambda: self.apply_color_filter('sepia'), relief="raised", font=("Helvetica", 12, "bold"), bg="#8E44AD", fg="black")
        self.btn_sepia.pack(fill="x", padx=10, pady=5)

        self.btn_bw = Button(self.left_frame, text="üñ§ N·ªÅn ƒëen tr·∫Øng", command=lambda: self.apply_color_filter('bw'), relief="raised", font=("Helvetica", 12, "bold"), bg="#8E44AD", fg="black")
        self.btn_bw.pack(fill="x", padx=10, pady=5)

        # N√∫t c·∫Øt v√† thay ƒë·ªïi k√≠ch th∆∞·ªõc ·∫£nh
        self.btn_crop_resize = Button(self.left_frame, text="‚úÇÔ∏è C·∫Øt & Resize", command=self.apply_crop_resize, relief="raised", font=("Helvetica", 12, "bold"), bg="#3498DB", fg="black")
        self.btn_crop_resize.pack(fill="x", padx=10, pady=5)

        # N√∫t ho√†n t√°c
        self.btn_undo = Button(self.left_frame, text="‚Ü©Ô∏è Ho√†n t√°c", command=self.undo, relief="raised", font=("Helvetica", 12, "bold"), bg="#F39C12", fg="black")
        self.btn_undo.pack(fill="x", padx=10, pady=5)

        # N√∫t reset
        self.btn_reset = Button(self.left_frame, text="üîÑ Reset", command=self.reset_image, relief="raised", font=("Helvetica", 12, "bold"), bg="#F39C12", fg="black")
        self.btn_reset.pack(fill="x", padx=10, pady=5)

        # N√∫t l∆∞u ·∫£nh
        self.btn_save = Button(self.left_frame, text="üíæ L∆∞u ·∫£nh", command=self.save_image, relief="raised", font=("Helvetica", 12, "bold"), bg="#27AE60", fg="black")
        self.btn_save.pack(fill="x", padx=10, pady=5)

        # N√∫t hi·ªÉn th·ªã bi·ªÉu ƒë·ªì m√†u c·ª•c b·ªô
        self.btn_local_histogram = Button(self.left_frame, text="üìä Bi·ªÉu ƒë·ªì m√†u c·ª•c b·ªô", command=self.display_local_color_histogram, relief="raised", font=("Helvetica", 12, "bold"), bg="#9B59B6", fg="black")
        self.btn_local_histogram.pack(fill="x", padx=10, pady=5)

        # Th√™m n√∫t chuy·ªÉn sang giao di·ªán B·ªô l·ªçc C√° Nh√¢n
        self.btn_custom_filter = Button(self.left_frame, text="üé® B·ªô l·ªçc c√° nh√¢n", command=self.show_custom_filter, relief="raised", font=("Helvetica", 12, "bold"), bg="#3498DB", fg="black")
        self.btn_custom_filter.pack(fill="x", padx=10, pady=5)

        # N√∫t "Ch·ªçn b·ªô l·ªçc"
        self.btn_select_filter = Button(self.left_frame, text="üõ†Ô∏è Ch·ªçn b·ªô l·ªçc", command=self.select_filter, relief="raised", font=("Helvetica", 12, "bold"), bg="#3498DB", fg="black")
        self.btn_select_filter.pack(fill="x", padx=10, pady=5)

        # Th√™m n√∫t "X√≥a ph√¥ng"
        self.btn_remove_background = Button(self.left_frame, text="‚ùå X√≥a ph√¥ng", command=self.remove_background, relief="raised", font=("Helvetica", 12, "bold"), bg="#FF6347", fg="black")
        self.btn_remove_background.pack(fill="x", padx=10, pady=5)

        self.image = None
        self.display_image = None
        self.history = []  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh ƒë·ªÉ ho√†n t√°c
        
    def open_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp")])
        if file_path:  # Ki·ªÉm tra n·∫øu file_path kh√¥ng r·ªóng (ng∆∞·ªùi d√πng ch·ªçn file)
           self.image = cv2.imread(file_path)
           self.history = [self.image.copy()]  # L∆∞u ·∫£nh g·ªëc v√†o l·ªãch s·ª≠
           self.display_image_on_canvas()
        else:
            print("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.")

    def save_image(self):
        if self.image is not None:
            file_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp")])
            if file_path:
                cv2.imwrite(file_path, self.image)

    def apply_brightness(self):
        if self.image is not None:
            brightness = self.brightness_slider.get()
            self.image = adjust_brightness(self.image, brightness-50)  # Adjusting slider range
            self.history.append(self.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
            self.display_image_on_canvas()

    def apply_contrast(self):
        if self.image is not None:
            contrast = self.contrast_slider.get()
            self.image = adjust_contrast(self.image, contrast)
            self.history.append(self.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
            self.display_image_on_canvas()

    def apply_color_filter(self, filter_type):
        if self.image is not None:
            self.image = apply_color_filter(self.image, filter_type)
            self.history.append(self.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
            self.display_image_on_canvas()

    def apply_crop_resize(self):
        if self.image is not None:
            # Crop and Resize: Select a portion and resize
            self.image = crop_and_resize(self.image, 50, 50, 100, 100, 200, 200)
            self.history.append(self.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
            self.display_image_on_canvas()
        
    # B·ªô l·ªçc Luminous: TƒÉng c∆∞·ªùng ƒë·ªô s√°ng v√† l√†m s√°ng da
    def apply_luminous_filter(image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        v = cv2.add(v, 50)  # TƒÉng ƒë·ªô s√°ng
        v = np.clip(v, 0, 255)
        final_hsv = cv2.merge((h, s, v))
        luminous_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return luminous_image

    # B·ªô l·ªçc Glowing: T·∫°o hi·ªáu ·ª©ng ph√°t s√°ng
    def apply_glowing_filter(image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        v = cv2.add(v, 100)  # TƒÉng ƒë·ªô s√°ng l√™n m·∫°nh m·∫Ω
        s = cv2.multiply(s, 1.2)  # TƒÉng c∆∞·ªùng ƒë·ªô b√£o h√≤a m√†u
        v = np.clip(v, 0, 255)
        s = np.clip(s, 0, 255)
        final_hsv = cv2.merge((h, s, v))
        glowing_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return glowing_image

    # B·ªô l·ªçc Vintage: T·∫°o hi·ªáu ·ª©ng c·ªï ƒëi·ªÉn v·ªõi t√¥ng m√†u ·∫•m
    def apply_vintage_filter(image):
        kernel = np.array([[0.393, 0.769, 0.189],
                       [0.349, 0.686, 0.168],
                       [0.272, 0.534, 0.131]])
        vintage_image = cv2.transform(image, kernel)
        vintage_image = np.clip(vintage_image, 0, 255)
        return vintage_image

    # B·ªô l·ªçc Neon: T·∫°o hi·ªáu ·ª©ng s√°ng neon
    def apply_neon_filter(image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        s = cv2.multiply(s, 1.5)  # TƒÉng ƒë·ªô b√£o h√≤a m·∫°nh m·∫Ω
        v = cv2.add(v, 50)  # TƒÉng ƒë·ªô s√°ng m·∫°nh m·∫Ω
        s = np.clip(s, 0, 255)
        v = np.clip(v, 0, 255)
        final_hsv = cv2.merge((h, s, v))    
        neon_image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return neon_image
     # H√†m x·ª≠ l√Ω x√≥a ph√¥ng
    def remove_background(self):
        if self.image is not None:
            self.image = remove_background(self.image)
            self.history.append(self.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
            self.display_image_on_canvas()

    def display_image_on_canvas(self):
        if self.image is not None:
            image_rgb = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
            image_pil = Image.fromarray(image_rgb)
            self.display_image = ImageTk.PhotoImage(image_pil)
            self.canvas.create_image(400, 300, image=self.display_image, anchor="center")

    def undo(self):
        if len(self.history) > 1:
            self.history.pop()  # Lo·∫°i b·ªè ·∫£nh hi·ªán t·∫°i kh·ªèi l·ªãch s·ª≠
            self.image = self.history[-1]  # Quay l·∫°i ·∫£nh tr∆∞·ªõc ƒë√≥
            self.display_image_on_canvas()
    
    def reset_image(self):
        if len(self.history) > 0:
            # Kh√¥i ph·ª•c ·∫£nh g·ªëc t·ª´ l·ªãch s·ª≠
            self.image = self.history[0]  # L·∫•y ·∫£nh g·ªëc
            self.display_image_on_canvas()
 

    def display_image_on_canvas(self):
        if self.image is not None:
            image_rgb = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
            image_pil = Image.fromarray(image_rgb)
            self.display_image = ImageTk.PhotoImage(image_pil)
            self.canvas.create_image(400, 300, image=self.display_image, anchor="center")

    def display_local_color_histogram(self):
        if self.image is not None:
            x, y, width, height = 50, 50, 150, 150  # V√πng b·∫°n mu·ªën t√≠nh to√°n bi·ªÉu ƒë·ªì m√†u
            show_local_color_histogram(self.image, x, y, width, height)
    def select_filter(self):
        # C·ª≠a s·ªï ch·ªçn b·ªô l·ªçc
        filter_window = Toplevel(self.root)
        filter_window.title("Ch·ªçn b·ªô l·ªçc")

        def apply_selected_filter(selected_filter):
            if selected_filter == "Luminous":
                self.image = apply_luminous_filter(self.image)
            elif selected_filter == "Glowing":
                self.image = apply_glowing_filter(self.image)
            elif selected_filter == "Vintage":
                self.image = apply_vintage_filter(self.image)
            elif selected_filter == "Neon":
                self.image = apply_neon_filter(self.image)
            self.display_image_on_canvas()  # G·ªçi ph∆∞∆°ng th·ª©c ƒë√∫ng ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
            filter_window.destroy()

        # Th√™m c√°c n√∫t l·ª±a ch·ªçn b·ªô l·ªçc
        filters = ["Luminous", "Glowing", "Vintage", "Neon"]
        for i, filter_name in enumerate(filters):
            Button(filter_window, text=filter_name, command=lambda filter_name=filter_name: apply_selected_filter(filter_name)).grid(row=i, column=0, padx=10, pady=5)

    def show_custom_filter(self):
        CustomFilterWindow(self.root, self)   
class CustomFilterWindow:
    def __init__(self, root, parent_app):
        self.root = root
        self.parent_app = parent_app
        self.top = Toplevel(root)
        self.top.title("B·ªô l·ªçc c√° nh√¢n")

        self.label = Label(self.top, text="Ch·ªânh s·ª≠a b·ªô l·ªçc c√° nh√¢n", font=("Arial", 16))
        self.label.pack(pady=10)

        # C√°c thanh tr∆∞·ª£t cho b·ªô l·ªçc c√° nh√¢n
        self.hue_slider = Scale(self.top, from_=0, to=360, orient=HORIZONTAL, label="Hue (M√†u s·∫Øc)", relief="sunken", sliderlength=20)
        self.hue_slider.set(0)
        self.hue_slider.pack(padx=10, pady=5)

        self.saturation_slider = Scale(self.top, from_=0, to=100, orient=HORIZONTAL, label="Saturation (B√£o h√≤a)", relief="sunken", sliderlength=20)
        self.saturation_slider.set(100)
        self.saturation_slider.pack(padx=10, pady=5)

        self.brightness_slider = Scale(self.top, from_=0, to=100, orient=HORIZONTAL, label="Brightness (ƒê·ªô s√°ng)", relief="sunken", sliderlength=20)
        self.brightness_slider.set(50)
        self.brightness_slider.pack(padx=10, pady=5)

        self.apply_button = Button(self.top, text="√Åp d·ª•ng b·ªô l·ªçc", command=self.apply_filter, relief="raised", font=("Arial", 12, "bold"), bg="#3498DB", fg="white")
        self.apply_button.pack(pady=20)

    def apply_filter(self):
        hue = self.hue_slider.get()
        saturation = self.saturation_slider.get()
        brightness = self.brightness_slider.get()

        # T·∫°o b·ªô l·ªçc t√πy ch·ªânh
        hsv = cv2.cvtColor(self.parent_app.image, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)

        h = cv2.add(h, hue - 0)  # ƒêi·ªÅu ch·ªânh Hue
        s = cv2.multiply(s, saturation / 100.0)  # ƒêi·ªÅu ch·ªânh Saturation
        v = cv2.add(v, brightness - 50)  # ƒêi·ªÅu ch·ªânh Brightness
        v = np.clip(v, 0, 255)

        hsv = cv2.merge((h, s, v))
        self.parent_app.image = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
        
        self.parent_app.history.append(self.parent_app.image.copy())  # L∆∞u l·∫°i l·ªãch s·ª≠ ·∫£nh
        self.parent_app.display_image_on_canvas()
        self.top.destroy()

if __name__ == "__main__":
    root = Tk()
    app = PhotoEditor(root)
    root.mainloop()